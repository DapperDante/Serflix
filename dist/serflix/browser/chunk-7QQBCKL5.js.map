{
  "version": 3,
  "sources": ["src/app/search/search.service.ts"],
  "sourcesContent": ["import { HttpClient, HttpErrorResponse, HttpEvent, HttpHandlerFn, HttpRequest } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\nimport { catchError, map, Observable, tap, throwError } from 'rxjs';\r\nimport { ErrorHandlingService } from 'src/app/error/error-handling.service';\r\nimport { Service } from 'src/app/interface/service.interface';\r\nimport { Movies } from 'src/app/movies/api/movies.api';\r\nimport { environment } from 'src/environments/environment.development';\r\n\r\nconst PATH = environment.ApiDbSearch;\r\n\r\n@Injectable({\r\n\tprovidedIn: 'platform',\r\n})\r\nexport class SearchService implements Service {\r\n\tprivate readonly _http = inject(HttpClient);\r\n\tprivate readonly _error = inject(ErrorHandlingService);\r\n\tconstructor() {\r\n\t\tconsole.log(`Service ${this.constructor.name} is ready`);\r\n\t}\r\n\tgetItemsByQuery(query: string, times: number | string, manyItemsRelation: number | string): Observable<Movies> {\r\n\t\treturn this._http\r\n\t\t\t.get<Movies>(`${PATH}?query=${query}&times=${times}&manyItemsRelation=${manyItemsRelation}`)\r\n\t\t\t.pipe(catchError(this.ErrorHandler), tap({ error: (error)=>this.ShowError(error) }));\r\n\t}\r\n\tShowError(error: Error): void {\r\n\t\tthis._error.ShowError(error.message);\r\n\t}\r\n\tErrorHandler(error: HttpErrorResponse): Observable<never> {\r\n\t\tlet message = '';\r\n\t\tswitch (error.status) {\r\n\t\t\tcase 404: {\r\n\t\t\t\tmessage = 'Not found results';\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tdefault: {\r\n\t\t\t\tmessage = 'Server disconnected';\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn throwError(() => new Error(message));\r\n\t}\r\n}\r\nexport function SearchMoviesInterceptor(\r\n\treq: HttpRequest<unknown>,\r\n\tnext: HttpHandlerFn\r\n): Observable<HttpEvent<unknown>> {\r\n\tif (!req.url.includes(PATH)) return next(req);\r\n\tconst BASE_IMG = environment.ApiTmdbImage;\r\n\tconst newReq = req.clone();\r\n\treturn next(newReq).pipe(\r\n\t\tmap((data: any) => {\r\n\t\t\tif (data.body) {\r\n\t\t\t\tif ('results' in data.body) {\r\n\t\t\t\t\tdata.body.results.map((value: any) => {\r\n\t\t\t\t\t\tvalue.poster_path = `${BASE_IMG}/${value.poster_path}`;\r\n\t\t\t\t\t\tvalue.backdrop_path = `${BASE_IMG}/${value.backdrop_path}`;\r\n\t\t\t\t\t\treturn value;\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn data;\r\n\t\t})\r\n\t);\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;AAQA,IAAM,OAAO,YAAY;AAKnB,IAAO,gBAAP,MAAO,eAAa;EAGzB,cAAA;AAFiB,SAAA,QAAQ,OAAO,UAAU;AACzB,SAAA,SAAS,OAAO,oBAAoB;AAEpD,YAAQ,IAAI,WAAW,KAAK,YAAY,IAAI,WAAW;EACxD;EACA,gBAAgB,OAAe,OAAwB,mBAAkC;AACxF,WAAO,KAAK,MACV,IAAY,GAAG,IAAI,UAAU,KAAK,UAAU,KAAK,sBAAsB,iBAAiB,EAAE,EAC1F,KAAK,WAAW,KAAK,YAAY,GAAG,IAAI,EAAE,OAAO,CAAC,UAAQ,KAAK,UAAU,KAAK,EAAC,CAAE,CAAC;EACrF;EACA,UAAU,OAAY;AACrB,SAAK,OAAO,UAAU,MAAM,OAAO;EACpC;EACA,aAAa,OAAwB;AACpC,QAAI,UAAU;AACd,YAAQ,MAAM,QAAQ;MACrB,KAAK,KAAK;AACT,kBAAU;AACV;MACD;MACA,SAAS;AACR,kBAAU;MACX;IACD;AACA,WAAO,WAAW,MAAM,IAAI,MAAM,OAAO,CAAC;EAC3C;;;uCA1BY,gBAAa;IAAA;EAAA;;4EAAb,gBAAa,SAAb,eAAa,WAAA,YAFb,WAAU,CAAA;EAAA;;AA8BjB,SAAU,wBACf,KACA,MAAmB;AAEnB,MAAI,CAAC,IAAI,IAAI,SAAS,IAAI;AAAG,WAAO,KAAK,GAAG;AAC5C,QAAM,WAAW,YAAY;AAC7B,QAAM,SAAS,IAAI,MAAK;AACxB,SAAO,KAAK,MAAM,EAAE,KACnB,IAAI,CAAC,SAAa;AACjB,QAAI,KAAK,MAAM;AACd,UAAI,aAAa,KAAK,MAAM;AAC3B,aAAK,KAAK,QAAQ,IAAI,CAAC,UAAc;AACpC,gBAAM,cAAc,GAAG,QAAQ,IAAI,MAAM,WAAW;AACpD,gBAAM,gBAAgB,GAAG,QAAQ,IAAI,MAAM,aAAa;AACxD,iBAAO;QACR,CAAC;MACF;IACD;AACA,WAAO;EACR,CAAC,CAAC;AAEJ;",
  "names": []
}
