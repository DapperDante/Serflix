{
  "version": 3,
  "sources": ["src/app/service/profile.service.ts"],
  "sourcesContent": ["import { inject, Injectable } from '@angular/core';\r\nimport { ProfileInfo, Profiles, RickAndMortyCharacters } from '../layout/api/account.api';\r\nimport { BehaviorSubject, catchError, map, Observable, tap, throwError } from 'rxjs';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment.development';\r\nimport { Service } from 'src/app/interface/service.interface';\r\nimport { ErrorHandlingService } from 'src/app/error/error-handling.service';\r\nimport { AuthService } from 'src/app/service/auth.service';\r\n\r\nconst PATH = environment.ApiDbProfiles;\r\nconst PATH_IMG = environment.ApiPhotos;\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root',\r\n})\r\nexport class ProfileService implements Service {\r\n\tprivate readonly _http = inject(HttpClient);\r\n\tprivate readonly _auth = inject(AuthService);\r\n\tprivate readonly _error = inject(ErrorHandlingService);\r\n\t// this is more useful when you want to get the profile without making other or repeat requests\r\n\tprivate profile$: BehaviorSubject<ProfileInfo | undefined>;\r\n\tconstructor() {\r\n\t\tconsole.log(`Service ${this.constructor.name} is ready`);\r\n\t\tthis.profile$ = new BehaviorSubject<ProfileInfo | undefined>(undefined);\r\n\t}\r\n\taddProfile(img: string, name: string): Observable<{ msg: string; token: string }> {\r\n\t\tconst profile = { name, img };\r\n\t\treturn this._http\r\n\t\t\t.post<{ msg: string; token: string }>(`${PATH}/add`, profile)\r\n\t\t\t.pipe(catchError(this.ErrorHandler), tap({ error: (error) => this.ShowError(error) }));\r\n\t}\r\n\t//First, you must use accessProfile when you want to access a profile, after that you can use getProfile$ to get the profile\r\n\tLogInProfile(idProfile: number | string): Observable<{ msg: string; token: string }> {\r\n\t\tconsole.log(idProfile);\r\n\t\treturn this._http\r\n\t\t\t.post<{ msg: string; token: string }>(`${PATH}/log-in`, { idProfile })\r\n\t\t\t.pipe(\r\n\t\t\t\tcatchError(this.ErrorHandler),\r\n\t\t\t\ttap({ next: (access) => this._auth.setToken(access.token), error: (error) => this.ShowError(error) })\r\n\t\t\t);\r\n\t}\r\n\tLogOutProfile(): Observable<{ msg: string; token: string }> {\r\n\t\treturn this._http.get<{ msg: string; token: string }>(`${PATH}/log-out`).pipe(\r\n\t\t\tcatchError(this.ErrorHandler),\r\n\t\t\ttap({\r\n\t\t\t\tnext: (access) => this._auth.setToken(access.token),\r\n\t\t\t\terror: (error) => this.ShowError(error),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\tgetProfiles(): Observable<Profiles> {\r\n\t\treturn this._http.get<Profiles>(`${PATH}/get-all`).pipe(\r\n\t\t\tcatchError(this.ErrorHandler),\r\n\t\t\ttap({\r\n\t\t\t\terror: (error) => this.ShowError(error),\r\n\t\t\t})\r\n\t\t);\r\n\t}\r\n\t// if you work with constant changes in the profile, you can use this method to get the update profile, after use getProfile$ to get the update profile\r\n\trefreshProfile() {\r\n\t\tthis._http\r\n\t\t\t.get<ProfileInfo>(`${PATH}/get`)\r\n\t\t\t.pipe(\r\n\t\t\t\tmap((profile: ProfileInfo) => {\r\n\t\t\t\t\tconst BASE_IMG = environment.ApiTmdbImage;\r\n\t\t\t\t\tprofile.results.map((result) => {\r\n\t\t\t\t\t\tresult.poster_path = `${BASE_IMG}${result.poster_path}`;\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t});\r\n\t\t\t\t\treturn profile;\r\n\t\t\t\t}),\r\n\t\t\t\tcatchError(this.ErrorHandler),\r\n\t\t\t\ttap({ error: (error) => this.ShowError(error) })\r\n\t\t\t)\r\n\t\t\t.subscribe((profile) => this.profile$?.next(profile));\r\n\t}\r\n\tgetProfile(): BehaviorSubject<ProfileInfo | undefined> {\r\n\t\treturn this.profile$!;\r\n\t}\r\n\tgetPhotos(): Observable<RickAndMortyCharacters> {\r\n\t\treturn this._http\r\n\t\t\t.get<RickAndMortyCharacters>(`${PATH_IMG}/character`)\r\n\t\t\t.pipe(catchError(this.ErrorHandler), tap({ error: (error) => this.ShowError(error) }));\r\n\t}\r\n\tupdateProfile(name?: string, img?: string): Observable<void> {\r\n\t\tconst profile = { name, img };\r\n\t\treturn this._http\r\n\t\t\t.put<void>(`${PATH}/put`, profile)\r\n\t\t\t.pipe(catchError(this.ErrorHandler), tap({ error: (error)=>this.ShowError(error) }));\r\n\t}\r\n\tisSelectedProfile(): boolean {\r\n\t\treturn sessionStorage.getItem('isSelectedProfile') ? true : false;\r\n\t}\r\n\tsetSelectedProfile(value: boolean): void {\r\n\t\tif (!value) {\r\n\t\t\tconsole.log('remove');\r\n\t\t\tsessionStorage.removeItem('isSelectedProfile');\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tsessionStorage.setItem('isSelectedProfile', 'true');\r\n\t}\r\n\tShowError(error: Error): void {\r\n\t\tthis._error.ShowError(error.message);\r\n\t}\r\n\tErrorHandler(error: HttpErrorResponse): Observable<never> {\r\n\t\tlet message = '';\r\n\t\tswitch (error.status) {\r\n\t\t\tcase 401:\r\n\t\t\t\tmessage = 'Unauthorized';\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tmessage = 'Server disconnected';\r\n\t\t}\r\n\t\treturn throwError(() => new Error(message));\r\n\t}\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
